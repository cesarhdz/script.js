/**
 * A helper for loading remote javascript using the "script tag hack".
 * The <script> tags might fetch any (remote) javascript by specifying
 * a 'src' attribute - they are not constrained by the same origin policy
 * as AJAX requests.
 * Loading might be defered until DOM is ready using the 'defer' option.
 * Besides there's special support for scripts that write directly to the
 * DOM using <code>document.write()</code>.
 * These are handled properly (yes even if the script loading was defered)
 * and You might even modify the writen HTML content before it gets into
 * Your page.
 *
 * @param opts the (script) options or a string in which case it behaves
 * like if <code>{ src: string }</code> was specified as the argument
 *
 * Supported options :
 *
 * - src: the script source - absolute HTTP URL or relative to 'base',
 *   this is the only required property
 *
 * - type: the script type, by default 'text/javascript'
 *
 * - base: the URL base - allows relative paths with the 'src' property
 *
 * - defer: set to true to load scripts after DOM is ready otherwise their
 *   going to load while building the DOM (just like regular <script> tags)
 *
 * - order: the order of loading the scripts (makes sense only with defered
 *   loading scripts), e.g. adding a script with order 0 means that it will get
 *   to the 0-th (first) position in the list of scripts waiting to be loaded
 *
 * - loadingHTML: HTML to show in place of the script while not loaded
 *
 * - loaded: callback that gets invoked after the script has loaded this for the
 *   function's scope refers to the script element. If the loading happened on 
 *   or after the DOM ready event fired (with `defer: true`) and the loaded 
 *   javascript called `document.write()/writeln()` the argument to the callback
 *   is a string array consisting of all the `write(str)` invocation arguments.
 *   Returning false from this function disables further processing (in-case of
 *   a defered load it won't inject the writes into the DOM).
 *
 * - complete: callback that gets invoked after the script completed (this in 
 *   general happens after the `loaded` callback)
 *
 * - append: where to append the <script> element, if it's a string an element
 *   with an id is searched and the script is appended as a child of that node,
 *   otherwise it should be a function that receives a script element and
 *   should inject the received node into the DOM
 *   
 * - writes: setting to `false` marks the script as not doing `document.writes`
 *   (by default assumed to be `true` if not set or set to `null`)
 *
 * NOTE: that the location of the script element is crucial if other elements
 * or HTML using document.write() is generated by the loading script - thus the
 * new content gets injected into the DOM after the script element !
 * 
 * NOTE: Due to possible `document.writes` in each loaded script - scripts are 
 * executed synchronously - a script loading blocks other scripts from loading !
 *
 * To setup default arguments for `script()` use `defaults` :
 * <code>
 *   script.defaults.base  = 'http://gist.github.com';
 *   script.defaults.defer = true;
 * </code>
 *
 * @author Copyright (c) 2010 - Karol Bucek
 * @license http://www.apache.org/licenses/LICENSE-2.0.html
 * @version 0.7-SNAPSHOT
 */
var script = ( function() {
    /** @const */
    var LOG = true;
    
    var NOOP = function() {}; // empty fn
    var log = NOOP; // empty fn
    if (LOG) {
        var errorLogged;
        log = function() {
            if ( window.console ) {
                try {
                    console.log.apply( console, Array.prototype.slice.call( arguments ) );
                }
                catch (e) { // IE8 can't console.log.apply :
                    errorLogged || console.log(e); errorLogged = true;
                    console.log( Array.prototype.join.call( arguments ) );
                }
            }
            else if ( window.opera ) {
                opera.postError( Array.prototype.join.call( arguments ) );
            }
            else {
                // NOOP
            }
        };
    }

    var writes = null;
    var tempDocWrite = function() { // a document.write replacement
        var args = arguments;
        if ( args && args[0] ) {
            LOG && log('document.write() args[0] = ', args[0]);
            if ( ! writes ) writes = [];
            writes.push( args[0] );
        }
        else {
            LOG && log('document.write() unexpected args = ', args);
        }
    };
    var tempDocWriteln = function(str) { tempDocWrite(str + '\n'); };

    var docWrite, docWriteln; // original document.write / writeln
    function overrideDocWrites() {
        if ( ! docWrite ) docWrite = document.write;
        if ( ! docWriteln ) docWriteln = document.writeln;
        document.write = tempDocWrite;
        document.writeln = tempDocWriteln;
    }
    function restoreDocWrites() {
        if ( docWrite ) document.write = docWrite;
        if ( docWriteln ) document.writeln = docWriteln;
        docWrite = null; docWriteln = null;
    }

    // load the next "script" (element) and invoke callback when done :
    function loadScript(settings, yieldDone) {
        LOG && log('loadScript() opts = ', settings);
        var loadedCallback = settings.loaded || NOOP, 
            completeCallback = settings.complete || NOOP;

        if ( settings.defer ) {
            var $script = document.createElement('script');
            $script.src = settings.src;
            if ( settings.type ) $script.type = settings.type;
            if ( settings.charset ) $script.setAttribute('charset', settings.charset);

            var handleScriptLoaded = function() {
                if ( settings.timer ) clearTimeout(settings.timer);
                
                var loadedReturn = loadedCallback.call($script, 
                    settings.writes ? writes || undefined : undefined
                );
                if (loadedReturn === false) return;
                var $div = document.getElementById(settings.id); // placeholder
                if ( settings.writes && writes ) { // document.write happened
                    LOG && log('handleScriptLoaded() writeArray.len = ', writes.length);
                    //var $scriptSibling = $script.nextSibling;
                    // nodes should get after the <script> tag :
                    var appendNode = function($node) {
                        if ($script.nextSibling) {
                            $script.parentNode.insertBefore($node, $script.nextSibling);
                        }
                        else {
                            $script.parentNode.appendChild($node);
                        }
                    };
                    if ( ! $div ) { // if called after DOM load - it won't exist
                        $div = document.createElement('div');
                        appendNode( $div );
                    }
                    // insert the HTML collected from document.write :
                    $div.style.display = 'none';
                    // IE hack for injecting script/style tags correctly :
                    $div.innerHTML = '<br/>' + writes.join('');
                    $div.removeChild( $div.childNodes[0] ); // remove the <br/> hack
                    LOG && log('handleScriptLoaded() div.childNodes.length = ', $div.childNodes.length);
                    // the HTML gets after the <script> tag :
                    var $divNode = $div.childNodes[0];
                    while ( $divNode ) {
                        // first remove the node from the $div :
                        $div.removeChild( $divNode );
                        appendNode( $divNode );
                        $divNode = $div.childNodes[0]; // NodeList is live
                    }
                }
                if ( $div ) $div.parentNode.removeChild($div); // was a temporary
                completeCallback.call($script, settings);
            };
            
            //var done = false;
            $script.onload = $script.onreadystatechange = function( _, isAbort ) {
                if ( /* ! done && */ ( ! this.readyState || 
                    this.readyState === "loaded" || this.readyState === "complete" ) ) {
                    //done = true;
                    
                    $script.onload = $script.onreadystatechange = null;
                    settings.$script = null;
                    
                    try { 
                        if (isAbort) {
                            var errorCallback = settings.error || NOOP;
                            isAbort = errorCallback.call($script, settings);
                            // returning false from the error callback aborts all 
                            // next script loading + keeps the script in the DOM !
                            if (isAbort !== false) {
                                $script.parentNode.removeChild($script);
                                $script.setAttribute('src', '');   
                            }
                        }
                        else handleScriptLoaded(); 
                    }
                    finally { isAbort !== false && yieldDone && yieldDone(); }
                }
            };
            settings.$script = $script; // for timeout to have access to <script>
            settings.append($script); // finally a <script> gets into DOM
        }
        else {
            $script = document.getElementById(settings.id);
            try { 
                // @todo just a fallback we should hook up these scripts differently !
                // when refactored @todo add a remove option - script from page ...
                var loadedReturn = loadedCallback.call($script);
                loadedReturn !== false && completeCallback.call($script, settings);
            }
            finally {
                if ( settings.idGenerated ) $script.id = null;
                yieldDone && yieldDone();
            }
        }
    }
    
    function loadScriptWithTimeout(settings, yieldDone) {
        settings.timer = setTimeout(function() {
            LOG && log('loadScriptWithTimeout()', settings);
            var $script = settings.$script; settings.$script = null;
            if ($script && $script.onload) { 
                // not yet succesfully loaded if there's still an onload handler
                LOG && log('loadScriptWithTimeout() timed out: ', $script, settings);
                $script.onload(null, true); // isAbort === true
            }
        }, settings.timeout || 0);
        
        return loadScript(settings, yieldDone);
    }
    
    var scripts = []; // a list of scripts to load
    function loadScripts() {
        if ( ! scripts || scripts.loading ) return; // already loading
        LOG && log('loadScripts() scripts.length = ', scripts.length);
        scripts.loading = true;
        (function loadNext() {
            if ( ! scripts.length ) {
                delete scripts.loading;
                return;
            }
            var settings = scripts.shift();
            if (settings) {
                var loadFn = settings.timeout ? loadScriptWithTimeout : loadScript;
                if (settings.writes) {
                    LOG && log('loadNext() with writes ...');
                    overrideDocWrites();writes = null;
                    loadFn(settings, function() { // done callback
                        restoreDocWrites(); writes = null; // clear for next
                        loadNext(); // setTimeout(loadNext, 1);
                    });
                }
                else {
                    LOG && log('loadNext() no writes ...');
                    loadFn(settings);
                    loadNext(); // setTimeout(loadNext, 1);
                }
            }
            else { // maybe there's a hole in the list
                loadNext();
            }
        })();
    }
    
    var DOMContentLoaded, load = function() { // a window.onload fallback
        if ( DOMContentLoaded ) { DOMContentLoaded = null; loadScripts(); }
    };
    if ( document.addEventListener ) { // "normal" browsers
        DOMContentLoaded = function() {
            document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
            DOMContentLoaded = null; loadScripts();
        };
        document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );
        window.addEventListener( "load", load, false );
     }
     else if ( document.attachEvent ) { // IE crap follows
        DOMContentLoaded = function() {
            if (document.readyState === "complete") { // make sure body exists
                document.detachEvent( "onreadystatechange", DOMContentLoaded );
                DOMContentLoaded = null; loadScripts();
            }
        };
        document.attachEvent( "onreadystatechange", DOMContentLoaded );
        window.attachEvent( "onload", load );
        
        var toplevel;
        try { toplevel = window.frameElement == null; } catch(e) {}
        if ( toplevel && document.documentElement.doScroll ) { 
            // doScrollCheck() :
            // If IE and not a frame
            // continually check to see if the document is ready
            // http://javascript.nwbox.com/IEContentLoaded/
            (function doScrollCheck() {
                if ( ! DOMContentLoaded ) return;
                try { document.documentElement.doScroll("left"); }
                catch(e) { setTimeout( doScrollCheck, 1 ); return; }

                loadScripts();
            })();
        }
    }
    
    /**
     * The script function itself
     */
    var script = function(args) {
        if ( ! args ) throw 'script : no arguments given';
        if ( typeof args === "string" ) args = {src: args};
        else {
            if ( ! args.src ) throw "script : 'src' is required";
        }

        var name, opts = {}, defs = script.defaults;
        if ( defs ) for ( name in defs ) opts[name] = defs[name];
        for ( name in args ) opts[name] = args[name];
        // complete some of the provided arguments :
        if ( opts.base && opts.src.substring(0, 4) !== 'http' ) {
            var base = opts.base, last = opts.base.length - 1;
            base = base[last] == '/' ? base.substring(0, last) : base;
            opts.src = base + '/' + opts.src;
        }

        // @todo support charset option !
        // onload option is @deprecated
        if ( opts.onload != null ) { // normalize onload -> onLoad
            if ( opts.onLoad != null ) {
                // make sure defs.onload does not overwrite args.onLoad :
                if ( args.onload != null ) opts.onLoad = args.onload;
                else if ( args.onLoad != null ) opts.onLoad = args.onLoad;
                else opts.onLoad = opts.onload;
            }
            else {
                opts.onLoad = opts.onload;
            }
            delete opts.onload;
        }
        if ( typeof(opts.defer) === 'undefined' ) opts.defer = opts.onLoad;

        if ( ! opts.id ) { 
            opts.id = script._generateId();
            opts.idGenerated = true;
        }

        var append = opts.append;
        if ( typeof append === "string" ) { // treat as Node ID
            opts.append = function($script) {
                var $append = document.getElementById(append);
                $append.appendChild($script);
            }
        }
        else if ( append && append.appendChild ) { // Node itself
            opts.append = function($script) {
                append.appendChild($script);
            }
        }
        
        // by default assume script does (document) writes :
        if ( opts.writes == null ) opts.writes = true;
        
        if ( DOMContentLoaded ) { // null after DOM load event already occured
            if ( opts.defer ) {
                var content = '<div id="'+ opts.id +'"';
                if ( opts.loadingHTML ) content += ('>' + opts.loadingHTML);
                else content += ' style="diplay: none;">';
                content += '</div>'; // no <script> yet - only a <div>
                if ( ! opts.append ) {
                    opts.append = function($script) {
                        var $div = document.getElementById(opts.id);
                        $div.parentNode.insertBefore($script, $div);
                    }
                }
            }
            else {
                content = '<script id="'+ opts.id +'" src="'+ opts.src +'"><\/script>';
            }
            document.write(content); // ok as we're still building the DOM
            
            opts.order == null ? scripts.push( opts ) : scripts.splice( opts.order, 0, opts );
        }
        else { // DOM load already happened
            opts.defer = true; // doesn't make sense to be false
            if ( ! opts.append ) {
                opts.append = function(script) {
                    var $elem = document.getElementsByTagName('body')[0];
                    $elem.appendChild(script);
                }
            }
            
            opts.order == null ? scripts.push( opts ) : scripts.splice( opts.order, 0, opts );
            loadScripts(); // safely callable multiple times
        }
    }

    var _generateId = 0;
    script._generateId = function() { // default _generateId fn
        return '_script-' + ( _generateId++ );
    };

    script.defaults = { // default script settings
        type: 'text/javascript' /*, timeout: 5 * 1000 */
    };

    return script;

})();